============================================================
= DB Setup
============================================================

1) Create a new database
	- mysql -u root -p
	- CREATE DATABASE `<database>`;
	- CREATE USER '<user>' IDENTIFIED BY '<password>';
	- GRANT ALL privileges ON `<database>`.* TO '<user>'@'%';
	- FLUSH PRIVILEGES;
	
2) Deploy initial tables
	- Run "01-Tables-0001-CoreTables.sql"
	- Optionally you can seed some sample data
		- Running "05-Data-Dev-0001-ClearAll.sql" will reset the DB for development
		- Running "05-Data-Dev-0002-SeedCoreData.sql" will seed some sample development data
	
============================================================
= Build and Deploy the Web UI
============================================================

1) [OPTIONAL] Restore NPM packages (faster initial build)
	- Open `<ROOT>\src\TimeTracker\ClientApp` in explorer
	- Run "npm install" to restore packages
	
2) Publish "TimeTracker" locally
	- Open "<ROOT>\src\TimeTracker.sln"
	- Publish "TimeTracker" to a local folder
		- Output type		: Local Folder
		- Configuration		: Release
		- Target Framework	: net5.0
		- Deployment Mode	: Framework-Dependent
		- Target Runtime	: Portable
		- Delete all existing files
	
3) Generate configuration file
	- Open "<ROOT>\src\TimeTracker.sln"
	- Set "TimeTracker.DevConsole" as the start up project
	- Edit "Program.cs" (<ROOT>\src\TimeTracker.DevConsole\Program.cs)
	
	- To generate "appsettings.json"
		- Uncomment the call to "GenerateSampleConfig()" in the Main method
		- Debug the application and allow it to generate a sample configuration file
		- The generated file path should be logged to the console
			> <ROOT>\src\TimeTracker.DevConsole\bin\Debug\net5.0\generated\appsettings.json
	
4) Create your user account
	- Open "<ROOT>\src\TimeTracker.sln"
	- Set "TimeTracker.DevConsole" as the start up project
	- To encrypt user passwords
		- Uncomment the call to "EncryptPassUsingConfig("password")" in the Main method
		- Replace "password" with the value you wish to use
		- [Optional] You can specify a path to your "appsettings.json" file as a second argument to "EncryptPassUsingConfig"
		- Debug the application and allow it to encrypt your credentials
		- Encrypted credentials should be logged to the console
		
			===================================
			= Encrypted password
			===================================
			appsettings : D:\wrk\time-tracker\src\TimeTracker.DevConsole\bin\Debug\net5.0\generated\appsettings.json
			Input       : password
			Encrypted   : gw63k042wCJFQAchTNbKsQ==
			Sanity      : password
			
		- You can use the generated password to create your account
	- Connect to your database and run the bellow command to create your account (replacing the placeholders)
	
		INSERT INTO `Users`
			(`Username`, `Password`, `UserEmail`, `FirstName`, `LastName`)
		VALUES
			('<username>', '<encrypted_pass>', '<your_email>', '<first_name>', '<last_name>');


============================================================
= Automating DB backups (*nix only)
============================================================

More information here: https://richardn.ca/2019/07/10/backing-up-mariadb-mysql-via-cron-2/

- SSH to your DB server
- Install "mysqldump"
- Create a ".my.cnf" file
	> sudo nano ~/.my.cnf
	
	[mysqldump]
	host = 127.0.0.1
	port = 3306
	user = <USER>
	password = <PASS>
	
- Test a dump of your DB using the following command (replacing the placeholders)
	> mysqldump _DATABASE_ > "_FILE_NAME_-$(date '+%F').sql"
	
	e.g.
	
	> mysqldump TimeTracker > "TimeTracker-$(date '+%F').sql"
	
- Create a CRON to schedule the backup
	> crontab -e
	
	00 23 * * * mysqldump --databases TimeTracker > "/home/niemandr/TimeTracker-$(date '+\%F').sql"

- Restart the CRON service (not required, more for my OCD)
	> sudo service cron reload


============================================================
= Installing ASP.NET Core on Ubuntu
============================================================
More information:
	- https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu
	
- Connect to your server and run the following commands
	> wget https://packages.microsoft.com/config/ubuntu/20.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
	> sudo dpkg -i packages-microsoft-prod.deb
	> sudo apt-get update
	> sudo apt-get install -y apt-transport-https
	> sudo apt-get update
	> sudo apt-get install -y aspnetcore-runtime-5.0

- To verify that the installation was a success you can run
	> dotnet --info
	

============================================================
= Copying app to server (Ubuntu)
============================================================

- Install "zip" if needed
	> sudo apt-get install zip
	
- Zip up and copy your applicatio to the server
- Unzip with this command
	> unzip app.zip
	

============================================================
= Working on
============================================================

LIST USERS :: awk -F: '{ print $1}' /etc/passwd

NOTES
	- https://docs.oracle.com/cd/E39271_01/studio.300/studio_install/src/cidi_studio_reverse_proxy_apache_proxypreservehost.html

- Locate your dotnet executable path
	> which dotnet
	
- Run application
	> /usr/bin/dotnet /home/niemandr/time-tracker/TimeTracker.dll --urls=http://0.0.0.0:5000
	
	
	

sudo nano /etc/nginx/sites-available/default

server {
	...
	location /time-tracker/ {
		proxy_pass http://0.0.0.0:5001/;
	}
}

sudo systemctl restart nginx.service && sudo systemctl status nginx.service
	
sudo vi /var/www/dotnet/time-tracker/ClientApp/dist/index.html
	
	
	
	
	
	
	
	
	
	
	
	
	

- Install apache
	> sudo apt update
	> sudo apt install apache2
	
	should be working :: http://192.168.0.101/
	
- Create ubuntu service
	> sudo vi /etc/systemd/system/time-tracker.service

	[Unit]
	Description=TimeTracker
	 
	[Service]
	WorkingDirectory=/var/www/dotnet/time-tracker
	ExecStart=/usr/bin/dotnet /var/www/dotnet/time-tracker/TimeTracker.dll --urls=http://0.0.0.0:5001/
	Restart=always
	RestartSec=5
	KillSignal=SIGINT
	SyslogIdentifier=time-tracker
	User=apache
	Environment=ASPNETCORE_ENVIRONMENT=Production
	 
	[Install]
	WantedBy=multi-user.target

	> sudo systemctl daemon-reload
	> sudo systemctl enable time-tracker.service
	> sudo chmod 0777 /var/www/dotnet/time-tracker/logs/
	> rm -f /var/www/dotnet/time-tracker/logs/time-logger.log
	> sudo systemctl start time-tracker.service
	> sudo systemctl status time-tracker.service
	> sudo vi /var/www/dotnet/time-tracker/ClientApp/dist/index.html
	> sudo systemctl restart time-tracker.service
	> sudo systemctl status time-tracker.service
	
- Configure apache
	> sudo vi /etc/apache2/conf-enabled/time-tracker.conf
	
	<VirtualHost *:80>
		ProxyPreserveHost On
		ProxyPassMatch "^/time-tracker/(.*)$" "http://127.0.0.1:5001/$1"
		ServerName www.example.com
		ServerAlias *.example.com
		ErrorLog /var/www/dotnet/apache-logs/httpd-error.log
		CustomLog /var/www/dotnet/apache-logs/httpd-access.log common
	</VirtualHost>
	
	
	
sudo lsof -i :80
	
sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2enmod proxy_balancer
sudo a2enmod lbmethod_byrequests

sudo systemctl restart apache2


sudo nano /etc/apache2/apache2.conf
sudo cp /etc/apache2/mods-available/proxy_http.load /etc/apache2/mods-enabled/proxy_http.load
sudo systemctl restart apache2.service



sudo systemctl status apache2.service




sudo vi /etc/nginx/conf.d/time-tracker.conf




sudo rm -f /etc/nginx/conf.d/time-tracker.conf && sudo vi /etc/nginx/conf.d/time-tracker.conf





sudo vi /etc/nginx/nginx.conf





